---
layout: post
title:  "一种可行的解决方案"
permalink: /lessons/solution/
---

## 体系
你可以调用网络中每个节点上的API接口来使用NEM功能。这种模式支持在 **各种解决方案的体系** 中使用区块链技术。

一个可以用于我们的用例解决方案：

![solution]({{ site.baseurl }}/assets/images/solution.png)

仓库操作员通过 **web app（web应用程序）** 实现交互。

该应用程序与 **公司的服务器** 连接，所有产品信息通过公司的服务器存储在 **已有的SQL数据库** 中。

该应用程序还连接了 **NEM区块链**，并从客户端发布transactions（交易）。

## 我们在什么地方使用NEM?

![use-case-nem]({{ site.baseurl }}/assets/images/use-case-nem.png)

我们之前已经决定使用 **account(账户)** 代表 **产品** 和 **仓库操作员**。

**产品**

产品即资产：产品是有价值的对象，且该价值是唯一的，可更新的，并由某人拥有。

account(帐户)可用于表示资产，它唯一地标识每个产品，并储存已发布的交易和马赛克的历史记录。

任何actor（角色）都可以通过产品地址来跟踪与产品相关的事件。

产品帐户不发送交易，而只接收交易。为了保证产品账号不签署交易，我们以确定的方式生成公钥。最终我们生成了一个代表公钥的哈希值，且任何人都无法从这个哈希值获取私钥相关的信息。

*publicKey = sha256(company_identifier + product_identifier)*

通这些步骤，即使数据库中的数据丢失，我们仍然可以从区块链中拿到产品信息。我们可以通过提供公司和产品的唯一标识符来再次生成产品的账户地址。

**仓库操作员**
account（账户）就像是一张身份证，帐户能标识并允许仓库操作员产生交易。

**安全封条**

**安全封条** 用 **namespace（命名空间）, subnamespace（子命名空间）和mosaic（马赛克）** 表示。命名空间代表公司，子命名空间代表部门。马赛克``company.safety：seal``代表安全封条。

我们可以选择把``transferable（转让）``属性设置为false。 这样可以防止马赛克在发送后再次被转让到其他帐户。但是，由于我们不会保存产品的私钥，因此产品一旦被发送，封条就无法去除。

谁将成为此命名空间和马赛克的所有者？乍一看，似乎仓库操作员的账户就是那个所有者。但是，仓库操作员可能会停止为该公司工作。出于这个原因，我们将创建一个新的 **公司** account（帐户）来注册这个马赛克和命名空间。

**公司** 向 **仓库操作员** account（帐户）发送一些马赛克。

仓库操作员向产品发送带有``1 company.safety :seal mosaic``的 **转移交易**，。
